---
layout: post
title: Javascript Debugging
description: How to debug Javascript
---

When I first started working on [Dailymuses][1]'s web client, since we already had an iPhone client that was already consuming the APIs from the backend, the decision to adopt [Backbone][2] as the frontend client to consume the already existing APIs instead of using server-side layout rendering is easy.

[Dailymuses][1] is in fact the first Javascript(or Coffeescript) heavy project that I first work on.  Unlike other heavy-use programming languages out there, it is actually pretty unclear on how to profile your Javascript performance, especially from the client/browser side.  Until recently, after I watched this [video from 37 Signals][3] on tricks/techniques they use to build the new Basecamp, I discovered a few `console` tricks that are pretty useful to profile/debug Javascript client/browser code.

Other than the famous `console.log`, there are actually `console.warn` and `console.error`.  Both are pretty self explanatory.

{% highlight javascript %}
console.warn('warning message!!!')
console.error('error message!!!')
{% endhighlight %}

<img src="/images/javascript-debugging/1.png" />

The yellow warning is generated by `console.warn` while the red error is
generated by `console.error`. 

You can also use the simple `console.count` to count the number of times one particular part of the code is executed.

{% highlight javascript %}
console.count('count this line!')
{% endhighlight %}

<img src="/images/javascript-debugging/2.png" />

This is especially useful if you want to count how many times a
particular piece of code is being run. 

Sometimes, if you don't want to clutter your console with a bunch of log
messages, you can use `console.group`.

{% highlight javascript %}
console.group("Grouped Messages")
console.log("Hello world!")
console.groupEnd()
{% endhighlight %}

<img src="/images/javascript-debugging/3.png" />

This piece of code helps to collect all the `console.log` messages in between
both `console.group` and `console.groundEnd` with a simple dropdown
button.

Now, it is what make the `console` module interesting.  You can actually
profile the performance of your Javascript code with `console.profile`.

{% highlight javascript %}
console.profile("Homepage Rendering")
blah blah blah...
console.profileEnd()
{% endhighlight %}

Then, under the Profiles tab of your Developer Tools.  You can see:

<img src="/images/javascript-debugging/4.png" />
<img src="/images/javascript-debugging/5.png" />

It shows both the CPU usage and running time.  Pretty neat, huh?

If you want to see how long a particular piece of code takes, you can
use `console.time` and `console.timeEnd`.

{% highlight javascript %}
console.time("Homepage Rendering")
blah blah blah...
console.timeEnd("Homepage Rendering")
{% endhighlight %}

<img src="/images/javascript-debugging/6.png" />

Now, let's talk about real debugging on Javascript.  You guys might have
known about the `debugger` command.  But, I am surprised by many people
who do not know about it and stick with `console.log` instead.

{% highlight javascript %}
debugger
{% endhighlight %}

`debugger` sets a breakpoint in between your Javascript code and let you
inspect those variables in your code.

`console.trace` is really self-explanatory.  It prints out the stack
trace 

{% highlight javascript %}
console.trace()
{% endhighlight %}

Lastly, you should also check out the `performance` API.

{% highlight javascript %}
performance
{% endhighlight %}

<img src="/images/javascript-debugging/7.png" />

Under `timing`, you can see how the page is rendered, measured in milliseconds since midnight of January 1, 1970 (UTC).  If you want to learn more about `performance`, you can check out this [article][4].  In Chrome, you will notice the extra `memory` attribute

Obviously, there are more that I have missed here, you can check out a [full list of `console` APIs][5].

[1]: http://dailymus.es
[2]: http://backbone.com
[3]: http://confreaks.com/videos/910-railsconf2012-basecamp-next-code-spelunking
[4]: http://www.html5rocks.com/en/tutorials/webperformance/basics/
[5]: http://getfirebug.com/wiki/index.php/Console_API#console.trace.28.29
